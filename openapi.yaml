openapi: 3.0.0
info:
  title: APIS
  version: 1.0.0
paths:    
  /user/login:
    post:
      summary: User Login
      description: User Authentication
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User Created
        "400":
          description: Bad user request
  /user/signup:
    post:
      summary: Create user
      description: Create user by request body
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                password:
                  type: string
                phone:
                  type: string
      responses:
        "201":
          description: User Created
        "400":
          description: Bad user request
  /user/{id}:
    get:
      summary: Get user
      description: Get a user by id
      tags:
        - User
      parameters:
        - in: path
          name: id
          description: id of user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A user response
        "404":
          description: User no found
    delete:
      summary: Delete user
      description: Delete a user by id
      tags:
        - User
      parameters:
        - in: path
          name: id
          description: id of user
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Deleted!
        "404":
          description: User no found
    put:
      summary: Update User
      description: update a user by id
      tags:
        - User
      parameters:
        - in: path
          name: id
          description: id of user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                password:
                  type: string
                phone:
                  type: string
                order:
                  type: string
      responses:
        "201":
          description: Updated
        "404":
          description: User no found
  /products:
    get:
      summary: Get Products
      description: Get all products
      tags:
        - Product
      responses:
        "200":
          description: Product has a response
        "404":
          description: Product no found
  /products/item/{id}/{idOfItem}:
    put:
      summary: Update product
      description: Update product by id
      tags:
        - Product
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/idOfItem"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items: 
                    type: object
                    properties:
                      id: 
                        type: number
                      imgSrc: 
                        type: string
                      imgDetail: 
                        type: string
                      imgAlt: 
                        type: string
                      name: 
                        type: string
                      description: 
                        type: string
                      price: 
                        type: number
                      calories: 
                        type: string
      responses:
        "201":
          description: Updated
        "404":
          description: Product no found
    delete:
      summary: Delete single product
      description: Delete a product by item id
      tags:
        - Product
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/idOfItem"
      responses:
        "201":
          description: Deleted!
        "404":
          description: User no found
  /products/{page}/{pageSize}:
    get:
      summary: Get products
      description: Get products by page and page size
      tags:
        - Product
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Product has a response
        "404":
          description: Product no found
  /address:
    post:
      summary: Create address
      description: Create address by request body
      tags:
      - Address 
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                userId:
                  type: string
                unit:
                  type: number 
                streetNum:
                  type: number
                streetName: 
                  type: string
                suburb:
                  type: string
                postcode:
                  type: number
              required:
                - userId
                - streetNum
                - streetName
                - suburb
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Address Created
        "400":
          description: Bad address request (User does not exist or Missing information)
  /address/{id}:
    get:
      summary: Get addresses 
      description: Get addresses by user id
      tags:
        - Address
      parameters:
        - in: path
          name: id
          description: id of user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Addresses response
        "404":
          description: User no found or address not found
    delete:
      summary: Delete address
      description: Delete an address by address id
      tags:
        - Address
      parameters:
        - in: path
          name: id
          description: id of address
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Address deleted
        "404":
          description: Address not found
    put:
      summary: Update address
      description: update a address by id
      tags:
        - Address
      parameters:
        - in: path
          name: id
          description: id of address
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                unit:
                  type: number
                streetNum:
                  type: number
                streetName:
                  type: string
                suburb:
                  type: string
                postcode:
                  type: number
              required:
                - streetNum
                - streetName
                - suburb
      responses:
        "200":
          description: Address updated
        "404":
          description: Address not found
  /address/{page}/{pageSize}:
    get:
      summary: List addresses
      description: List addresses and support pagenation.
      tags:
        - Address
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Addresses response.
        "400":
          description: Bad request.
        "404":
          description: Addresses not found.        
  /stores:
    get:
      summary: Get stores
      description: get all stores
      tags:
        - Stores
      responses:
        "200":
          description: Stores has a response
        "404":
          description: Stores not found
  /toppings:
    get:
      summary: Get all toppings
      description: Get all toppings
      tags:
        - Topping
      responses:
        "200":
          description: Toppings are found
        "404":
          description: Toppings no found        
  /order:
    post:
      summary: Create order
      description: Create order after checkout
      tags:
        - Order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderTime:
                  type: string
                orderItems:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                      foodName:
                        type: string
                      foodPrice:
                        type: number
                      imgDetail:
                        type: string
                      imgAlt:
                        type: string
                      quantity:
                        type: number
                totalPrice:
                  type: number
                address:
                  type: string
                type:
                  type: string
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Order Created
        "400":
          description: Bad order request
    get:
      summary: Bulk get order
      description: Get all orders
      tags:
        - Order
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An order response
        "404":
          description: Order no found
  /order/{id}:
    get:
      summary: Get order
      description: Get an order by id
      tags:
        - Order
      parameters:
        - in: path
          name: id
          description: id of order
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An order response
        "404":
          description: Order no found
    delete:
      summary: Delete order
      description: Delete an order by id
      tags:
        - Order
      parameters:
        - in: path
          name: id
          description: id of order
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Order deleted
        "404":
          description: Order no found
    put:
      summary: Update order
      description: update a order by id
      tags:
        - Order
      parameters:
        - in: path
          name: id
          description: id of order
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderTime:
                  type: string
                orderItems:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                      foodName:
                        type: string
                      foodPrice:
                        type: number
                      imgDetail:
                        type: string
                      imgAlt:
                        type: string
                      quantity:
                        type: number
                totalPrice:
                  type: number
                address:
                  type: string
                type:
                  type: string
      responses:
        "201":
          description: Order updated
        "404":
          description: Order no found
  /userorders/{id}:
    get:
      summary: Get list of users.
      description: Get list of users by page and page size.
      tags:
        - User
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A user response
        "400":
          description: Bad request
        "404":
          description: Users not found 
  /user/{page}/{pageSize}:
    get:
      summary: List users.
      description: List users and support pagenation.
      tags:
        - Bulk User
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A user response.
        "400":
          description: Bad Request.
        "404":
          description: User not found.          
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  parameters:
    page:
      in: path
      name: page
      description: Page index of users, which starts with 1
      required: true
      schema: 
        type: number
    pageSize: 
      in: path
      name: pageSize
      description: Number of users per page, which should greater than 0
      schema: 
        type: number
      required: true
    id:
      in: path
      name: id
      description: id of user, must be unique
      schema:
        type: string
      required: true
    idOfItem:
      in: path
      name: idOfItem
      description: id of item, must be unique
      schema:
        type: string
      required: true 



